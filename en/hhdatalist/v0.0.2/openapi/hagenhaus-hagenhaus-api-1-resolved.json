{
  "openapi": "3.0.0",
  "info": {
    "title": "Hagenhaus API",
    "description": "Hagenhaus API",
    "version": "1"
  },
  "servers": [
    {
      "url": "https://hagenhaus.com/api"
    },
    {
      "url": "http://localhost:8081/api"
    }
  ],
  "paths": {
    "/devportals/v1/countries": {
      "get": {
        "tags": [
          "Countries"
        ],
        "description": "This operation returns an array of [ISO-3 country-code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) objects.",
        "operationId": "getCountries",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Specifies the fields to return in each record. Default is all fields.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "All fields": {
                "value": ""
              },
              "field1": {
                "value": "field1"
              },
              "field1, field2, and field3": {
                "value": "field1, field2, field3"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Specifies the types of records that are returnable. Default is all records.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "All records": {
                "value": ""
              },
              "Records where field1 is 25": {
                "value": "field1 = 25"
              },
              "Records where field2 is \"abc\"": {
                "value": "field2 like \"abc\""
              },
              "Records where field2 starts with \"abc\"": {
                "value": "field2 like \"abc%\""
              },
              "Records where field2 includes \"xyz\"": {
                "value": "field2 like \"%xyz%\""
              },
              "Records where field2 includes \"abc\" and field3 is \"xyz\"": {
                "value": "field2 like \"%abc%\" and field3 like \"xyz\""
              }
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Establishing the order of returnable records. Default is random.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "Default order": {
                "value": ""
              },
              "Order by field asc": {
                "value": "field asc"
              },
              "Order by field1 asc, then field2 desc": {
                "value": "field1 asc, field2 desc"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Specifies page number. 1 means first page. Default is 1.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Specifies page size. Default is 10.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "hasMetadata",
            "in": "query",
            "description": "True means return metadata. Default is true.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCountriesResponse200"
                },
                "example": {
                  "metadata": {
                    "numTotalRecords": 249,
                    "numFilteredRecords": 7,
                    "numResponseRecords": 3,
                    "page": 1,
                    "limit": 3,
                    "numTotalPages": 3,
                    "firstItemOnPage": 1
                  },
                  "records": [
                    {
                      "id": "AFG",
                      "name": "Afghanistan"
                    },
                    {
                      "id": "KAZ",
                      "name": "Kazakhstan"
                    },
                    {
                      "id": "KGZ",
                      "name": "Kyrgyzstan"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/devportals/v1/countries/{id}": {
      "get": {
        "tags": [
          "Countries"
        ],
        "description": "This operation returns a [ISO-3 country-code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) object.",
        "operationId": "getCountry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "[ISO-3 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/CountryCode"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Specifies the fields to return in each record. Default is all fields.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "All fields": {
                "value": ""
              },
              "field1": {
                "value": "field1"
              },
              "field1, field2, and field3": {
                "value": "field1, field2, field3"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                },
                "example": {
                  "id": "AFG",
                  "name": "Afghanistan"
                }
              }
            }
          }
        }
      }
    },
    "/famous/v1/trees": {
      "get": {
        "tags": [
          "Trees"
        ],
        "description": "This operation returns an array of famous tree objects.",
        "operationId": "getFamousTrees",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Specifies the fields to return in each record. Default is all fields.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "All fields": {
                "value": ""
              },
              "field1": {
                "value": "field1"
              },
              "field1, field2, and field3": {
                "value": "field1, field2, field3"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Specifies the types of records that are returnable. Default is all records.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "All records": {
                "value": ""
              },
              "Records where field1 is 25": {
                "value": "field1 = 25"
              },
              "Records where field2 is \"abc\"": {
                "value": "field2 like \"abc\""
              },
              "Records where field2 starts with \"abc\"": {
                "value": "field2 like \"abc%\""
              },
              "Records where field2 includes \"xyz\"": {
                "value": "field2 like \"%xyz%\""
              },
              "Records where field2 includes \"abc\" and field3 is \"xyz\"": {
                "value": "field2 like \"%abc%\" and field3 like \"xyz\""
              }
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Establishing the order of returnable records. Default is random.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "Default order": {
                "value": ""
              },
              "Order by field asc": {
                "value": "field asc"
              },
              "Order by field1 asc, then field2 desc": {
                "value": "field1 asc, field2 desc"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Specifies page number. 1 means first page. Default is 1.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Specifies page size. Default is 10.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTreesResponse200"
                },
                "example": {
                  "metadata": {
                    "numTotalRecords": 12,
                    "numFilteredRecords": 2,
                    "numResponseRecords": 2,
                    "page": 1,
                    "limit": 3,
                    "numTotalPages": 1,
                    "firstItemOnPage": 1
                  },
                  "records": [
                    {
                      "id": 4,
                      "birthYear": 500,
                      "city": "Derby",
                      "country": "AUS",
                      "description": "The Baobab Prison Tree ...",
                      "girth": 48,
                      "height": 46,
                      "lat": -17.3507,
                      "links": [
                        {
                          "link": "https://en.wikipedia.org/...",
                          "text": "Wikipedia"
                        },
                        {
                          "link": "https://www.monumentaltrees.com/...",
                          "text": "Monumental Trees"
                        }
                      ],
                      "lng": 123.6699,
                      "name": "Boab Prison Tree",
                      "species": {
                        "link": "https://en.wikipedia.org/...",
                        "text": "Adansonia gregorii"
                      }
                    },
                    {
                      "id": 10,
                      "birthYear": 1780,
                      "city": "Durham",
                      "country": "AUS",
                      "description": "The Dig Tree is ...",
                      "girth": 0,
                      "height": 0,
                      "lat": "-27.6237000",
                      "links": [
                        {
                          "link": "https://en.wikipedia.org/...",
                          "text": "Wikipedia"
                        }
                      ],
                      "lng": "141.0758000",
                      "name": "Burke and Wills Dig Tree",
                      "species": {
                        "link": "https://en.wikipedia.org/...",
                        "text": "Eucalyptus"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Trees"
        ],
        "description": "This operation creates a famous tree record.",
        "operationId": "createFamousTree",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_trees_body"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/famous/v1/trees/{id}": {
      "get": {
        "tags": [
          "Trees"
        ],
        "description": "This operation returns a famous tree object.",
        "operationId": "getFamousTree",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Record Id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Specifies the fields to return in each record. Default is all fields.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "All fields": {
                "value": ""
              },
              "field1": {
                "value": "field1"
              },
              "field1, field2, and field3": {
                "value": "field1, field2, field3"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tree"
                },
                "example": {
                  "id": 5,
                  "birthYear": 400,
                  "city": "Santa María del Tule",
                  "country": "MEX",
                  "description": "El Árbol del Tule is ...",
                  "girth": 46,
                  "height": 116,
                  "lat": 17.0465308,
                  "links": [
                    {
                      "link": "https://en.wikipedia.org/...",
                      "text": "Wikipedia"
                    },
                    {
                      "link": "https://www.tripadvisor.com/...",
                      "text": "TripAdvisor"
                    }
                  ],
                  "lng": -96.6365872,
                  "name": "Árbol del Tule",
                  "species": {
                    "link": "https://en.wikipedia.org/...",
                    "text": "Taxodium mucronatum"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Trees"
        ],
        "description": "This operation deletes a famous tree record.",
        "operationId": "deleteFamousTree",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Record Id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Trees"
        ],
        "description": "This operation updates a famous tree record.",
        "operationId": "modifyFamousTree",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Record Id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/trees_id_body"
              },
              "example": {
                "properties": {
                  "updates": "city='Thorndike'"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Metadata": {
        "title": "Metadata",
        "type": "object",
        "properties": {
          "numTotalRecords": {
            "type": "integer",
            "description": "Total number of records in the database."
          },
          "numFilteredRecords": {
            "type": "integer",
            "description": "Total number of records in the database that match the filter."
          },
          "numResponseRecords": {
            "type": "integer",
            "description": "Total number of records in this particular response body."
          },
          "page": {
            "type": "integer",
            "description": "Current page (one-based))."
          },
          "limit": {
            "type": "integer",
            "description": "Page size."
          },
          "numTotalPages": {
            "type": "integer",
            "description": "Math.ceil( numFilteredRecords / limit )."
          },
          "firstItemOnPage": {
            "type": "integer",
            "description": "Index of first item on page into numFilteredRecords (one-based)."
          }
        }
      },
      "Country": {
        "title": "Country",
        "type": "object",
        "properties": {
          "countryCode": {
            "$ref": "#/components/schemas/CountryCode"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CountryArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Country"
        }
      },
      "CountryCode": {
        "maxLength": 3,
        "minLength": 3,
        "pattern": "^[A-Z]{3}$",
        "type": "string"
      },
      "GetCountriesResponse200": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "records": {
            "$ref": "#/components/schemas/CountryArray"
          }
        }
      },
      "GetTreesResponse200": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "records": {
            "$ref": "#/components/schemas/TreeArray"
          }
        }
      },
      "Id": {
        "type": "string",
        "description": "Record ID."
      },
      "Link": {
        "title": "Link",
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "Url."
          },
          "text": {
            "type": "string",
            "description": "Text."
          }
        }
      },
      "StringId": {
        "type": "string",
        "description": "Identifier of type string."
      },
      "Tree": {
        "title": "Tree",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "birthYear": {
            "type": "integer"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryCode"
          },
          "description": {
            "type": "string"
          },
          "girth": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "lat": {
            "type": "number"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "lng": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "species": {
            "$ref": "#/components/schemas/Link"
          }
        }
      },
      "TreeArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Tree"
        }
      },
      "Uuid": {
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "type": "string",
        "description": "Universally Unique ID."
      },
      "v1_trees_body": {
        "type": "object",
        "properties": {
          "birthYear": {
            "type": "integer"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryCode"
          },
          "description": {
            "type": "string"
          },
          "girth": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "lat": {
            "type": "number"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "lng": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "species": {
            "$ref": "#/components/schemas/Link"
          }
        }
      },
      "trees_id_body": {
        "type": "object",
        "properties": {
          "updates": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "CountryCodeInPath": {
        "name": "id",
        "in": "path",
        "description": "[ISO-3 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/CountryCode"
        }
      },
      "Fields": {
        "name": "fields",
        "in": "query",
        "description": "Specifies the fields to return in each record. Default is all fields.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        },
        "examples": {
          "All fields": {
            "value": ""
          },
          "field1": {
            "value": "field1"
          },
          "field1, field2, and field3": {
            "value": "field1, field2, field3"
          }
        }
      },
      "Filter": {
        "name": "filter",
        "in": "query",
        "description": "Specifies the types of records that are returnable. Default is all records.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        },
        "examples": {
          "All records": {
            "value": ""
          },
          "Records where field1 is 25": {
            "value": "field1 = 25"
          },
          "Records where field2 is \"abc\"": {
            "value": "field2 like \"abc\""
          },
          "Records where field2 starts with \"abc\"": {
            "value": "field2 like \"abc%\""
          },
          "Records where field2 includes \"xyz\"": {
            "value": "field2 like \"%xyz%\""
          },
          "Records where field2 includes \"abc\" and field3 is \"xyz\"": {
            "value": "field2 like \"%abc%\" and field3 like \"xyz\""
          }
        }
      },
      "HasFieldList": {
        "name": "hasFieldList",
        "in": "query",
        "description": "True means return list of all record fields. Default is false.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean"
        }
      },
      "HasMetadata": {
        "name": "hasMetadata",
        "in": "query",
        "description": "True means return metadata. Default is true.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean"
        }
      },
      "HasRecords": {
        "name": "hasRecords",
        "in": "query",
        "description": "True means return records. Default is true.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean"
        }
      },
      "HasJoinedFields": {
        "name": "hasJoinedFields",
        "in": "query",
        "description": "True means include joined fields in response. Default is false.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean"
        }
      },
      "Order": {
        "name": "order",
        "in": "query",
        "description": "Establishing the order of returnable records. Default is random.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        },
        "examples": {
          "Default order": {
            "value": ""
          },
          "Order by field asc": {
            "value": "field asc"
          },
          "Order by field1 asc, then field2 desc": {
            "value": "field1 asc, field2 desc"
          }
        }
      },
      "IdInPath": {
        "name": "id",
        "in": "path",
        "description": "Record Id.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/Id"
        }
      },
      "Page": {
        "name": "page",
        "in": "query",
        "description": "Specifies page number. 1 means first page. Default is 1.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer"
        }
      },
      "Limit": {
        "name": "limit",
        "in": "query",
        "description": "Specifies page size. Default is 10.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer"
        }
      },
      "StringIdInPath": {
        "name": "id",
        "in": "path",
        "description": "Record identifier",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/StringId"
        }
      },
      "UuidInPath": {
        "name": "id",
        "in": "path",
        "description": "Universally Unique ID (e.g. 12345678-abcd-abcd-abcd-12345678abcd).",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/Uuid"
        }
      },
      "Updates": {
        "name": "updates",
        "in": "query",
        "description": "Specifies one or more fields to update along with the new value for each.",
        "required": true,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        },
        "examples": {
          "field1": {
            "value": "field1=\"New Value\""
          },
          "field1 and field2": {
            "value": "field1=\"New Value\",field2=\"New Value\""
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}