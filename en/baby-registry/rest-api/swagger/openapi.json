{
  "openapi": "3.0.0",
  "info": {
    "title": "Baby Registry",
    "description": "Baby Registry is an example application that enables expectant parents to create online gift registries where friends and family can purchase gifts. The backend includes a Node.js server with a REST API and a MySQL database. Many frontends are possible. A browser-based client is included.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://hagenhaus.com:3000"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication operations enable clients to trade credentials (username and password) for tokens required by most other operations."
    },
    {
      "name": "Purchases",
      "description": "Purchase operations purchase gifts associated with the specified registry."
    },
    {
      "name": "Registries",
      "description": "These operations create, get, modify, and delete registries."
    },
    {
      "name": "Users",
      "description": "These operations create, get, modify, and delete users."
    }
  ],
  "paths": {
    "/api/v1/tokens": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create Access Token",
        "description": "This operation trades a username and a password for a token required by most other operations.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "email": "snow@disney.com",
                  "password": "mypassword",
                  "bakeCookie": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "noauthAuth": []
          }
        ]
      }
    },
    "/api/v1/purchases": {
      "post": {
        "tags": [
          "Purchases"
        ],
        "summary": "createPurchase",
        "description": "This operation causes the caller to purchase the specified gift.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "giftId": "10"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/v1/registries": {
      "get": {
        "tags": [
          "Registries"
        ],
        "summary": "getRegistries",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "Registries"
        ],
        "summary": "createRegistry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "name": "Moana Registry",
                  "dueDate": "2022-02-26",
                  "productIds": [
                    1,
                    2,
                    3
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/v1/registries/{id}": {
      "get": {
        "tags": [
          "Registries"
        ],
        "summary": "getRegistry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            },
            "example": "2"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Registries"
        ],
        "summary": "deleteRegistry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Remove this. A user should be able to delete the user's registry only.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            },
            "example": "9"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Registries"
        ],
        "summary": "modifyRegistry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Remove this. A user should be able to modify the user's registry only.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            },
            "example": "10"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "name": "Camilia Registry 002",
                  "dueDate": "2022-05-01",
                  "state": "inactive"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "getUsers",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "Filter on first names that contain this value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Filter on last names that contain this value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter on emails that contain this value.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Return this many records per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Return this page where 1 is the first page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort records by this field.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sort records asc or desc.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countsOnly",
            "in": "query",
            "description": "Return total and total-filtered record counts, but not the actual records.",
            "required": false,
            "allowEmptyValue": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "firstName": "Jane",
                  "lastName": "Doe",
                  "email": "jane@disney.com",
                  "password": "pwd1000",
                  "street": "123 Main Street",
                  "city": "Garden City",
                  "region": "Maine",
                  "country": "USA",
                  "postalCode": "012345"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "noauthAuth": []
          }
        ]
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            },
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Remove this. A user should be able to delete the user's account only.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            },
            "example": "11"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "modifyUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Remove this. A user should be able to modify the user's record only.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            },
            "example": "7"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "street": "8290 Gulf Court",
                  "city": "Meriden",
                  "region": "CT",
                  "country": "USA",
                  "postalCode": "06450"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/password": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "modifyUserPassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Remove this. A user should be able to modify the user's password only.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            },
            "example": "7"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "password": "pwd1001"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User ID."
          },
          "firstName": {
            "type": "string",
            "description": "User first name."
          },
          "lastName": {
            "type": "string",
            "description": "User last name."
          },
          "email": {
            "type": "string",
            "description": "User email."
          },
          "street": {
            "type": "string",
            "description": "User street."
          },
          "city": {
            "type": "string",
            "description": "User city."
          },
          "region": {
            "type": "string",
            "description": "User region."
          },
          "country": {
            "type": "string",
            "description": "User country."
          },
          "postalCode": {
            "type": "string",
            "description": "User postal code."
          }
        }
      }
    },
    "securitySchemes": {
      "noauthAuth": {
        "type": "http",
        "scheme": "noauth"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}